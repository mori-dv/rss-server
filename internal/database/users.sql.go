// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkAdmin = `-- name: CheckAdmin :one
SELECT name, api_key, is_admin FROM users WHERE id=$1
`

type CheckAdminRow struct {
	Name    string
	ApiKey  string
	IsAdmin string
}

func (q *Queries) CheckAdmin(ctx context.Context, id uuid.UUID) (CheckAdminRow, error) {
	row := q.db.QueryRowContext(ctx, checkAdmin, id)
	var i CheckAdminRow
	err := row.Scan(&i.Name, &i.ApiKey, &i.IsAdmin)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, created_at, updated_at, name, api_key, is_admin, tel_id)
VALUES ($1, $2, $3, $4, encode(sha256(random()::text::bytea), 'hex'), $5, $6)
RETURNING id, created_at, updated_at, name, api_key, is_admin, tel_id
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	IsAdmin   string
	TelID     int32
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.IsAdmin,
		arg.TelID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.IsAdmin,
		&i.TelID,
	)
	return i, err
}

const getAdminUsers = `-- name: GetAdminUsers :many
SELECT id, created_at, updated_at, name, api_key, is_admin, tel_id FROM users WHERE is_admin=1
`

func (q *Queries) GetAdminUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAdminUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ApiKey,
			&i.IsAdmin,
			&i.TelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, name, api_key, is_admin, tel_id FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ApiKey,
			&i.IsAdmin,
			&i.TelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTelegramIdUser = `-- name: GetTelegramIdUser :one
SELECT tel_id FROM users WHERE id=$1
`

func (q *Queries) GetTelegramIdUser(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getTelegramIdUser, id)
	var tel_id int32
	err := row.Scan(&tel_id)
	return tel_id, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, name, api_key, is_admin, tel_id From users where api_key = $1
`

func (q *Queries) GetUser(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
		&i.IsAdmin,
		&i.TelID,
	)
	return i, err
}
